# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestSmokeTest():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_adminPage(self):
    self.driver.get("http://127.0.0.1:5500/teton/1.6/index.html")
    self.driver.set_window_size(1489, 845)
    self.driver.find_element(By.LINK_TEXT, "Admin").click()
    elements = self.driver.find_elements(By.ID, "username")
    assert len(elements) > 0
    self.driver.find_element(By.ID, "username").send_keys("hallegracecooper")
    self.driver.find_element(By.ID, "password").send_keys("halle")
    self.driver.find_element(By.CSS_SELECTOR, ".mysubmit:nth-child(4)").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".errorMessage").text == "Invalid username and password."
  
  def test_directoryPage(self):
    self.driver.get("http://127.0.0.1:5500/teton/1.6/index.html")
    self.driver.set_window_size(1489, 845)
    self.driver.find_element(By.LINK_TEXT, "Directory").click()
    
    # Improved validation: Check if the directory contains the expected text for gold-member
    gold_member_text = self.driver.find_element(By.CSS_SELECTOR, ".gold-member:nth-child(9) > p:nth-child(2)").text
    assert gold_member_text == "Teton Turf and Tree"
    
    # Ensure the directory list interaction is functioning
    self.driver.find_element(By.ID, "directory-list").click()
    gold_member_text_after_click = self.driver.find_element(By.CSS_SELECTOR, ".gold-member:nth-child(9) > p:nth-child(2)").text
    assert gold_member_text_after_click == "Teton Turf and Tree"
  
  def test_homePage(self):
    self.driver.get("http://127.0.0.1:5500/teton/1.6/index.html")
    self.driver.set_window_size(974, 1039)
    
    # Check if the header logo image exists
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".header-logo img")
    assert len(elements) > 0
    
    # Validate header text
    header_title = self.driver.find_element(By.CSS_SELECTOR, ".header-title > h1").text
    assert header_title == "Teton Idaho"
    
    header_subtitle = self.driver.find_element(By.CSS_SELECTOR, ".header-title > h2").text
    assert header_subtitle == "Chamber of Commerce"
    
    # Check page title
    assert self.driver.title == "Teton Idaho CoC"
    
    # Ensure spotlight elements exist
    spotlight1 = self.driver.find_elements(By.CSS_SELECTOR, ".spotlight1 > h4")
    assert len(spotlight1) > 0
    spotlight2 = self.driver.find_elements(By.CSS_SELECTOR, ".spotlight2 > h4")
    assert len(spotlight2) > 0
    
    # Ensure "Join Us" link is present and functional
    elements = self.driver.find_elements(By.LINK_TEXT, "Join Us")
    assert len(elements) > 0
    self.driver.find_element(By.LINK_TEXT, "Join Us").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "section > h3").text == "Welcome to the Teton Chamber of Commerce Signup Wizard!"
  
  def test_joinPage(self):
    self.driver.get("http://127.0.0.1:5500/teton/1.6/index.html")
    self.driver.set_window_size(1489, 845)
    self.driver.find_element(By.LINK_TEXT, "Join").click()
    
    # Check if the first name input field is present
    elements = self.driver.find_elements(By.NAME, "fname")
    assert len(elements) > 0
    self.driver.find_element(By.NAME, "fname").send_keys("Halle")
    
    # Ensure the last name input field is present
    self.driver.find_element(By.NAME, "lname").send_keys("Cooper")
    
    # Fill in the business information
    self.driver.find_element(By.NAME, "bizname").send_keys("Coopers")
    self.driver.find_element(By.NAME, "biztitle").send_keys("CEO")
    
    # Submit the form and verify email input field
    self.driver.find_element(By.NAME, "submit").click()
    elements = self.driver.find_elements(By.NAME, "email")
    assert len(elements) > 0

    # Optional: Add an assertion for any expected post-submission text or functionality, if applicable